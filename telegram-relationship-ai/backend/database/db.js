const sqlite3 = require('sqlite3').verbose();
const fs = require('fs');
const path = require('path');

let db;

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
function initDatabase() {
  const dbPath = path.join(__dirname, 'relationship_ai.db');
  
  db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
      console.error('Error opening database:', err);
    } else {
      console.log('üì¶ Connected to SQLite database');
      
      // –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é SQL —Å—Ö–µ–º—É
      const schema = fs.readFileSync(path.join(__dirname, 'schema.sql'), 'utf8');
      
      db.exec(schema, (err) => {
        if (err) {
          console.error('Error executing schema:', err);
        } else {
          console.log('‚úÖ Main database schema initialized');
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ö–µ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞
          try {
            const psychSchema = fs.readFileSync(path.join(__dirname, 'psychological_test_schema.sql'), 'utf8');
            db.exec(psychSchema, (err) => {
              if (err) {
                console.error('Error executing psychological schema:', err);
              } else {
                console.log('‚úÖ Psychological test schema initialized');
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
                try {
                  const fragmentsSchema = fs.readFileSync(path.join(__dirname, 'personality_fragments.sql'), 'utf8');
                  db.exec(fragmentsSchema, (err) => {
                    if (err && !err.message.includes('UNIQUE constraint failed')) {
                      console.error('Error loading personality fragments:', err);
                    } else {
                      console.log('‚úÖ Personality fragments loaded');
                    }
                  });
                  
                  // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º—É –ø–æ–¥—Å—á–µ—Ç–∞ –æ—á–∫–æ–≤
                  const scoringSchema = fs.readFileSync(path.join(__dirname, 'answer_scoring.sql'), 'utf8');
                  db.exec(scoringSchema, (err) => {
                    if (err && !err.message.includes('UNIQUE constraint failed')) {
                      console.error('Error loading answer scoring:', err);
                    } else {
                      console.log('‚úÖ Answer scoring system loaded');
                    }
                  });
                  
                } catch (fragmentsError) {
                  console.error('Error reading fragments file:', fragmentsError);
                }
              }
            });
          } catch (psychError) {
            console.error('Error reading psychological schema file:', psychError);
          }
        }
      });
    }
  });
  
  // –í–∫–ª—é—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏
  db.run('PRAGMA foreign_keys = ON');
  
  return db;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
function getDB() {
  if (!db) {
    throw new Error('Database not initialized. Call initDatabase() first.');
  }
  return db;
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
const userQueries = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createOrUpdateUser(telegramData, referrerId = null) {
    return new Promise((resolve, reject) => {
      const { id: telegram_id, username, first_name, last_name } = telegramData;
      
      const query = `
        INSERT INTO users (telegram_id, username, first_name, last_name, referrer_id) 
        VALUES (?, ?, ?, ?, ?)
        ON CONFLICT(telegram_id) DO UPDATE SET
          username = excluded.username,
          first_name = excluded.first_name,
          last_name = excluded.last_name,
          updated_at = CURRENT_TIMESTAMP
        RETURNING *
      `;
      
      db.get(query, [telegram_id, username, first_name, last_name, referrerId], (err, row) => {
        if (err) {
          // –ï—Å–ª–∏ ON CONFLICT –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥
          if (err.message.includes('CONFLICT')) {
            // –ü—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updateQuery = `
              UPDATE users SET 
                username = ?, first_name = ?, last_name = ?, updated_at = CURRENT_TIMESTAMP
              WHERE telegram_id = ?
            `;
            db.run(updateQuery, [username, first_name, last_name, telegram_id], function(updateErr) {
              if (updateErr) {
                reject(updateErr);
              } else {
                // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                db.get('SELECT * FROM users WHERE telegram_id = ?', [telegram_id], (selectErr, user) => {
                  if (selectErr) reject(selectErr);
                  else resolve(user);
                });
              }
            });
          } else {
            reject(err);
          }
        } else {
          resolve(row);
        }
      });
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ Telegram ID
  async getUserByTelegramId(telegramId) {
    return new Promise((resolve, reject) => {
      db.get('SELECT * FROM users WHERE telegram_id = ?', [telegramId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  },

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  async hasUsedFreeAnalysis(userId) {
    return new Promise((resolve, reject) => {
      db.get('SELECT free_analysis_used FROM users WHERE id = ?', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row ? row.free_analysis_used > 0 : false);
      });
    });
  },

  // –û—Ç–º–µ—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
  async markFreeAnalysisUsed(userId) {
    return new Promise((resolve, reject) => {
      db.run('UPDATE users SET free_analysis_used = 1 WHERE id = ?', [userId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
const questionQueries = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
  async getAllQuestions() {
    return new Promise((resolve, reject) => {
      db.all('SELECT * FROM questions ORDER BY id', (err, rows) => {
        if (err) reject(err);
        else {
          // –ü–∞—Ä—Å–∏–º JSON –æ–ø—Ü–∏–∏
          const questions = rows.map(q => ({
            ...q,
            options: q.options ? JSON.parse(q.options) : []
          }));
          resolve(questions);
        }
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–≤–µ—Ç–∞–º–∏
const answerQueries = {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
  async saveAnswer(userId, questionId, answer, score = 0) {
    return new Promise((resolve, reject) => {
      const query = `
        INSERT OR REPLACE INTO answers (user_id, question_id, answer, score) 
        VALUES (?, ?, ?, ?)
      `;
      db.run(query, [userId, questionId, answer, score], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserAnswers(userId) {
    return new Promise((resolve, reject) => {
      db.all('SELECT * FROM answers WHERE user_id = ? ORDER BY question_id', [userId], (err, rows) => {
        if (err) reject(err);
        else resolve(rows);
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
const resultQueries = {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
  async saveResult(userId, archetype, description, recommendations, detailedAnalysis, totalScore) {
    return new Promise((resolve, reject) => {
      const query = `
        INSERT INTO results (user_id, archetype, description, recommendations, detailed_analysis, total_score) 
        VALUES (?, ?, ?, ?, ?, ?)
      `;
      db.run(query, [userId, archetype, description, recommendations, detailedAnalysis, totalScore], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getLatestResult(userId) {
    return new Promise((resolve, reject) => {
      db.get('SELECT * FROM results WHERE user_id = ? ORDER BY created_at DESC LIMIT 1', [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–µ—Ç–∏–ø–∞–º–∏
const archetypeQueries = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞ –ø–æ ID
  async getArchetypeById(id) {
    return new Promise((resolve, reject) => {
      db.get('SELECT * FROM archetypes WHERE id = ?', [id], (err, row) => {
        if (err) reject(err);
        else {
          if (row) {
            // –ü–∞—Ä—Å–∏–º JSON –ø–æ–ª—è
            row.strengths = row.strengths ? JSON.parse(row.strengths) : [];
            row.weaknesses = row.weaknesses ? JSON.parse(row.weaknesses) : [];
            row.recommendations = row.recommendations ? JSON.parse(row.recommendations) : [];
          }
          resolve(row);
        }
      });
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∞—Ä—Ö–µ—Ç–∏–ø–æ–≤
  async getAllArchetypes() {
    return new Promise((resolve, reject) => {
      db.all('SELECT * FROM archetypes ORDER BY id', (err, rows) => {
        if (err) reject(err);
        else {
          const archetypes = rows.map(row => ({
            ...row,
            strengths: row.strengths ? JSON.parse(row.strengths) : [],
            weaknesses: row.weaknesses ? JSON.parse(row.weaknesses) : [],
            recommendations: row.recommendations ? JSON.parse(row.recommendations) : []
          }));
          resolve(archetypes);
        }
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
const paymentQueries = {
  // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –ø–ª–∞—Ç–µ–∂–µ
  async createPayment(userId, amount, method, productType, referrerId = null, referrerReward = 0) {
    return new Promise((resolve, reject) => {
      const query = `
        INSERT INTO payments (user_id, amount, method, product_type, referrer_id, referrer_reward) 
        VALUES (?, ?, ?, ?, ?, ?)
      `;
      db.run(query, [userId, amount, method, productType, referrerId, referrerReward], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
  async updatePaymentStatus(paymentId, status, transactionId = null) {
    return new Promise((resolve, reject) => {
      const query = `UPDATE payments SET status = ?, transaction_id = ? WHERE id = ?`;
      db.run(query, [status, transactionId, paymentId], (err) => {
        if (err) reject(err);
        else resolve();
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
const referralQueries = {
  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–≤—è–∑–∏
  async createReferral(referrerId, referredId) {
    return new Promise((resolve, reject) => {
      const query = `
        INSERT OR IGNORE INTO referrals (referrer_id, referred_id) 
        VALUES (?, ?)
      `;
      db.run(query, [referrerId, referredId], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  async getReferralStats(userId) {
    return new Promise((resolve, reject) => {
      const query = `
        SELECT 
          COUNT(*) as total_referrals,
          SUM(reward_paid) as total_rewards,
          SUM(first_purchase_made) as successful_referrals
        FROM referrals 
        WHERE referrer_id = ?
      `;
      db.get(query, [userId], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });
  }
};

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º–∏ –∫–æ–¥–∞–º–∏
const referralCodeQueries = {
  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
  generateUniqueCode() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    let code = '';
    for (let i = 0; i < 8; i++) {
      code += chars.charAt(Math.floor(Math.random() * chars.length));
    }
    return code;
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async createReferralCode(userId) {
    return new Promise(async (resolve, reject) => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–¥
        const existingCode = await this.getUserReferralCode(userId);
        if (existingCode) {
          resolve(existingCode);
          return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        let code;
        let isUnique = false;
        let attempts = 0;
        
        while (!isUnique && attempts < 10) {
          code = this.generateUniqueCode();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å
          db.get('SELECT id FROM referral_codes WHERE code = ?', [code], (err, row) => {
            if (err) {
              reject(err);
              return;
            }
            if (!row) {
              isUnique = true;
            }
          });
          attempts++;
        }

        if (!isUnique) {
          reject(new Error('Failed to generate unique code'));
          return;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        const query = `
          INSERT INTO referral_codes (user_id, code) 
          VALUES (?, ?)
        `;
        
        db.run(query, [userId, code], function(err) {
          if (err) {
            reject(err);
          } else {
            resolve({
              id: this.lastID,
              code: code,
              user_id: userId,
              clicks: 0,
              successful_referrals: 0
            });
          }
        });
        
      } catch (error) {
        reject(error);
      }
    });
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async getUserReferralCode(userId) {
    return new Promise((resolve, reject) => {
      db.get(
        'SELECT * FROM referral_codes WHERE user_id = ? AND is_active = 1 ORDER BY created_at DESC LIMIT 1',
        [userId],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });
  },

  // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
  async getUserByReferralCode(code) {
    return new Promise((resolve, reject) => {
      db.get(
        'SELECT rc.*, u.* FROM referral_codes rc JOIN users u ON rc.user_id = u.id WHERE rc.code = ? AND rc.is_active = 1',
        [code],
        (err, row) => {
          if (err) reject(err);
          else resolve(row);
        }
      );
    });
  },

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –∫–ª–∏–∫–æ–≤
  async incrementClicks(code) {
    return new Promise((resolve, reject) => {
      db.run(
        'UPDATE referral_codes SET clicks = clicks + 1 WHERE code = ?',
        [code],
        (err) => {
          if (err) reject(err);
          else resolve();
        }
      );
    });
  },

  // –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
  async incrementSuccessfulReferrals(code) {
    return new Promise((resolve, reject) => {
      db.run(
        'UPDATE referral_codes SET successful_referrals = successful_referrals + 1 WHERE code = ?',
        [code],
        (err) => {
          if (err) reject(err);
          else resolve();
        }
      );
    });
  }
};

module.exports = {
  initDatabase,
  getDB,
  users: userQueries,
  questions: questionQueries,
  answers: answerQueries,
  results: resultQueries,
  archetypes: archetypeQueries,
  payments: paymentQueries,
  referrals: referralQueries,
  referralCodes: referralCodeQueries
};