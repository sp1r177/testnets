// Telegram WebApp API
const tg = window.Telegram.WebApp;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let appState = {
    user: null,
    currentQuestion: 0,
    questions: [],
    answers: [],
    result: null,
    products: []
};

// API –±–∞–∑–æ–≤—ã–π URL
const API_BASE = '/api';

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', async () => {
    console.log('üöÄ Initializing Telegram WebApp...');
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram WebApp
    tg.ready();
    tg.expand();
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
    applyTelegramTheme();
    
    // –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
    const urlParams = new URLSearchParams(window.location.search);
    const referrerId = urlParams.get('ref');
    
    // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await authenticateUser(referrerId);
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è
    bindEvents();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    await loadInitialData();
    
    console.log('‚úÖ App initialized successfully');
});

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
function applyTelegramTheme() {
    const root = document.documentElement;
    
    if (tg.colorScheme === 'dark') {
        document.body.setAttribute('data-theme', 'dark');
    }
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ –∏–∑ Telegram
    if (tg.themeParams) {
        root.style.setProperty('--tg-theme-bg-color', tg.themeParams.bg_color || '#ffffff');
        root.style.setProperty('--tg-theme-text-color', tg.themeParams.text_color || '#000000');
        root.style.setProperty('--tg-theme-hint-color', tg.themeParams.hint_color || '#999999');
        root.style.setProperty('--tg-theme-link-color', tg.themeParams.link_color || '#2481cc');
        root.style.setProperty('--tg-theme-button-color', tg.themeParams.button_color || '#2481cc');
        root.style.setProperty('--tg-theme-button-text-color', tg.themeParams.button_text_color || '#ffffff');
        root.style.setProperty('--tg-theme-secondary-bg-color', tg.themeParams.secondary_bg_color || '#f1f1f1');
    }
}

// –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function authenticateUser(referrerId = null) {
    try {
        showLoader('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
        
        const initData = tg.initData || 'user=%7B%22id%22%3A123456789%2C%22first_name%22%3A%22Test%22%2C%22username%22%3A%22testuser%22%7D';
        
        const response = await fetch(`${API_BASE}/auth/telegram`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                initData: initData,
                referrerId: referrerId
            })
        });
        
        if (!response.ok) {
            throw new Error('Authentication failed');
        }
        
        const data = await response.json();
        appState.user = data.user;
        
        console.log('‚úÖ User authenticated:', appState.user);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        updateHomeScreen();
        
    } catch (error) {
        console.error('‚ùå Authentication error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏', 'error');
    } finally {
        hideLoader();
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
async function loadInitialData() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
        const questionsResponse = await fetch(`${API_BASE}/questions`);
        if (questionsResponse.ok) {
            const questionsData = await questionsResponse.json();
            appState.questions = questionsData.questions;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
        const productsResponse = await fetch(`${API_BASE}/purchase/products`);
        if (productsResponse.ok) {
            const productsData = await productsResponse.json();
            appState.products = productsData.products;
        }
        
    } catch (error) {
        console.error('‚ùå Error loading initial data:', error);
    }
}

// –ü—Ä–∏–≤—è–∑–∫–∞ —Å–æ–±—ã—Ç–∏–π
function bindEvents() {
    // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById('start-test-btn').addEventListener('click', startTest);
    document.getElementById('view-result-btn').addEventListener('click', () => showScreen('result-screen'));
    document.getElementById('profile-btn').addEventListener('click', showProfile);
    
    // –≠–∫—Ä–∞–Ω —Ç–µ—Å—Ç–∞
    document.getElementById('prev-btn').addEventListener('click', previousQuestion);
    document.getElementById('next-btn').addEventListener('click', nextQuestion);
    
    // –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    document.getElementById('share-result-btn').addEventListener('click', shareResult);
    document.getElementById('get-premium-btn').addEventListener('click', () => showScreen('purchase-screen'));
    document.getElementById('home-btn').addEventListener('click', () => showScreen('home-screen'));
    
    // –≠–∫—Ä–∞–Ω –ø–æ–∫—É–ø–∫–∏
    document.getElementById('back-to-result-btn').addEventListener('click', () => showScreen('result-screen'));
    
    // –≠–∫—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—è
    document.getElementById('copy-link-btn').addEventListener('click', copyReferralLink);
    document.getElementById('share-referral-btn').addEventListener('click', shareReferralLink);
    document.getElementById('profile-home-btn').addEventListener('click', () => showScreen('home-screen'));
    document.getElementById('withdraw-btn').addEventListener('click', withdrawEarnings);
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞
function updateHomeScreen() {
    if (!appState.user) return;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if (appState.user.last_result) {
        document.getElementById('view-result-btn').style.display = 'block';
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    const startBtn = document.getElementById('start-test-btn');
    if (appState.user.has_used_free_analysis) {
        startBtn.innerHTML = '<span>üîÑ –ü—Ä–æ–π—Ç–∏ –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–æ–≤–æ</span>';
    }
}

// –ü–æ–∫–∞–∑ —ç–∫—Ä–∞–Ω–∞
function showScreen(screenId) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    document.querySelectorAll('.screen').forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    document.getElementById(screenId).classList.add('active');
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (screenId === 'purchase-screen') {
        renderProducts();
    } else if (screenId === 'profile-screen') {
        loadProfile();
    }
}

// –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
function startTest() {
    if (appState.questions.length === 0) {
        showNotification('–í–æ–ø—Ä–æ—Å—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã', 'error');
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    if (appState.user.has_used_free_analysis) {
        if (appState.user.subscription_type === 'free') {
            showNotification('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω. –ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è.', 'warning');
            showScreen('purchase-screen');
            return;
        }
    }
    
    appState.currentQuestion = 0;
    appState.answers = [];
    
    showScreen('test-screen');
    showQuestion();
}

// –ü–æ–∫–∞–∑ –≤–æ–ø—Ä–æ—Å–∞
function showQuestion() {
    const question = appState.questions[appState.currentQuestion];
    if (!question) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = ((appState.currentQuestion + 1) / appState.questions.length) * 100;
    document.getElementById('progress').style.width = `${progress}%`;
    document.getElementById('progress-text').textContent = `${appState.currentQuestion + 1} / ${appState.questions.length}`;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
    document.getElementById('question-text').textContent = question.text;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    const optionsContainer = document.getElementById('question-options');
    optionsContainer.innerHTML = '';
    
    question.options.forEach((option, index) => {
        const optionEl = document.createElement('div');
        optionEl.className = 'option';
        optionEl.textContent = option;
        optionEl.addEventListener('click', () => selectOption(index, option));
        optionsContainer.appendChild(optionEl);
    });
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    document.getElementById('prev-btn').disabled = appState.currentQuestion === 0;
    document.getElementById('next-btn').disabled = true;
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    const existingAnswer = appState.answers[appState.currentQuestion];
    if (existingAnswer) {
        const options = optionsContainer.querySelectorAll('.option');
        options.forEach((option, index) => {
            if (question.options[index] === existingAnswer) {
                option.classList.add('selected');
                document.getElementById('next-btn').disabled = false;
            }
        });
    }
}

// –í—ã–±–æ—Ä –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞
function selectOption(index, answer) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
    document.querySelectorAll('.option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
    event.target.classList.add('selected');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    appState.answers[appState.currentQuestion] = answer;
    
    // –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ"
    document.getElementById('next-btn').disabled = false;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É —á–µ—Ä–µ–∑ 300–º—Å
    setTimeout(() => {
        if (appState.currentQuestion < appState.questions.length - 1) {
            nextQuestion();
        } else {
            finishTest();
        }
    }, 300);
}

// –ü—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
function previousQuestion() {
    if (appState.currentQuestion > 0) {
        appState.currentQuestion--;
        showQuestion();
    }
}

// –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
function nextQuestion() {
    if (appState.currentQuestion < appState.questions.length - 1) {
        appState.currentQuestion++;
        showQuestion();
    } else {
        finishTest();
    }
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
async function finishTest() {
    try {
        showLoader('–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –æ—Ç–≤–µ—Ç—ã
        for (let i = 0; i < appState.answers.length; i++) {
            await fetch(`${API_BASE}/answers`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    userId: appState.user.id,
                    questionId: i + 1,
                    answer: appState.answers[i]
                })
            });
        }
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const resultResponse = await fetch(`${API_BASE}/result/generate`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: appState.user.id
            })
        });
        
        if (!resultResponse.ok) {
            throw new Error('Failed to generate result');
        }
        
        const resultData = await resultResponse.json();
        appState.result = resultData.result;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        showResult();
        
    } catch (error) {
        console.error('‚ùå Error finishing test:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤', 'error');
    } finally {
        hideLoader();
    }
}

// –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
function showResult() {
    const result = appState.result;
    if (!result) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    document.getElementById('archetype-name').textContent = result.archetype;
    document.getElementById('archetype-description').textContent = result.short_description;
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    const strengthsList = document.getElementById('strengths-list');
    strengthsList.innerHTML = '';
    result.strengths.forEach(strength => {
        const li = document.createElement('li');
        li.textContent = strength;
        strengthsList.appendChild(li);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    const weaknessesList = document.getElementById('weaknesses-list');
    weaknessesList.innerHTML = '';
    result.weaknesses.forEach(weakness => {
        const li = document.createElement('li');
        li.textContent = weakness;
        weaknessesList.appendChild(li);
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    const recommendationsList = document.getElementById('recommendations-list');
    recommendationsList.innerHTML = '';
    result.recommendations.forEach(recommendation => {
        const li = document.createElement('li');
        li.textContent = recommendation;
        recommendationsList.appendChild(li);
    });
    
    showScreen('result-screen');
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    appState.user.has_used_free_analysis = true;
    updateHomeScreen();
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
function shareResult() {
    if (!appState.result) return;
    
    const referralLink = `https://t.me/${tg.initDataUnsafe?.user?.username || 'relationship_ai_bot'}?start=ref_${appState.user.id}`;
    
    const shareText = `üß† –Ø —É–∑–Ω–∞–ª —Å–≤–æ–π –∞—Ä—Ö–µ—Ç–∏–ø –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö!

–†–µ–∑—É–ª—å—Ç–∞—Ç: ${appState.result.archetype}
${appState.result.short_description}

üéÅ –ü—Ä–æ–π–¥–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π AI-–∞–Ω–∞–ª–∏–∑ –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ:
${referralLink}`;
    
    if (tg.openTelegramLink) {
        tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(referralLink)}&text=${encodeURIComponent(shareText)}`);
    } else {
        copyToClipboard(shareText);
        showNotification('–¢–µ–∫—Å—Ç –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
function renderProducts() {
    const container = document.getElementById('products-list');
    container.innerHTML = '';
    
    Object.entries(appState.products).forEach(([key, product], index) => {
        const productEl = document.createElement('div');
        productEl.className = `product-card ${index === 1 ? 'popular' : ''}`;
        
        productEl.innerHTML = `
            <div class="product-header">
                <div class="product-name">${product.name}</div>
                <div class="product-price">${product.price} ‚ÇΩ</div>
            </div>
            <div class="product-description">${product.description}</div>
            <button class="btn-primary product-buy-btn" onclick="buyProduct('${key}')">
                ‚≠ê –ö—É–ø–∏—Ç—å –∑–∞ ${product.stars_price} Stars
            </button>
            <button class="btn-outline product-buy-btn" onclick="buyProductCrypto('${key}')" style="margin-top: 8px;">
                üí≥ –ö—É–ø–∏—Ç—å –∑–∞ ${product.price} ‚ÇΩ
            </button>
        `;
        
        container.appendChild(productEl);
    });
}

// –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ Stars
async function buyProduct(productType) {
    try {
        showLoader('–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...');
        
        const response = await fetch(`${API_BASE}/purchase/create-invoice/stars`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: appState.user.telegram_id,
                productType: productType
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to create invoice');
        }
        
        const data = await response.json();
        showNotification('–°—á–µ—Ç —Å–æ–∑–¥–∞–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –¥–ª—è –æ–ø–ª–∞—Ç—ã.', 'success');
        
    } catch (error) {
        console.error('‚ùå Purchase error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞', 'error');
    } finally {
        hideLoader();
    }
}

// –ü–æ–∫—É–ø–∫–∞ —á–µ—Ä–µ–∑ CryptoBot
async function buyProductCrypto(productType) {
    try {
        showLoader('–°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã...');
        
        const response = await fetch(`${API_BASE}/purchase/create-invoice/crypto`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                userId: appState.user.telegram_id,
                productType: productType
            })
        });
        
        if (!response.ok) {
            throw new Error('Failed to create crypto invoice');
        }
        
        const data = await response.json();
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
        if (tg.openLink) {
            tg.openLink(data.invoice_url);
        } else {
            window.open(data.invoice_url, '_blank');
        }
        
    } catch (error) {
        console.error('‚ùå Crypto purchase error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞', 'error');
    } finally {
        hideLoader();
    }
}

// –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
async function showProfile() {
    showScreen('profile-screen');
    await loadProfile();
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
async function loadProfile() {
    try {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
        const response = await fetch(`${API_BASE}/auth/profile/${appState.user.telegram_id}`);
        
        if (!response.ok) {
            throw new Error('Failed to load profile');
        }
        
        const data = await response.json();
        const profile = data.profile;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–æ—Ñ–∏–ª—è
        document.getElementById('profile-name').textContent = profile.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        document.getElementById('subscription-badge').textContent = profile.subscription_type.toUpperCase();
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        document.getElementById('total-referrals').textContent = profile.referral_stats.total_referrals || 0;
        document.getElementById('earned-stars').textContent = profile.referral_stats.total_rewards || 0;
        document.getElementById('current-balance').textContent = profile.stars_balance || 0;
        
        // –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞
        document.getElementById('referral-link').value = profile.referral_link;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—ã–≤–æ–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –±–∞–ª–∞–Ω—Å
        if (profile.stars_balance > 0) {
            document.getElementById('withdraw-section').style.display = 'block';
        }
        
    } catch (error) {
        console.error('‚ùå Profile load error:', error);
        showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', 'error');
    }
}

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏
function copyReferralLink() {
    const linkInput = document.getElementById('referral-link');
    copyToClipboard(linkInput.value);
    showNotification('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞!', 'success');
}

// –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π
async function shareReferralLink() {
    try {
        const response = await fetch(`${API_BASE}/referral/link/${appState.user.telegram_id}`);
        
        if (!response.ok) {
            throw new Error('Failed to get referral link');
        }
        
        const data = await response.json();
        
        if (tg.openTelegramLink) {
            tg.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(data.referral_link)}&text=${encodeURIComponent(data.share_text)}`);
        } else {
            copyToClipboard(data.share_text);
            showNotification('–¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!', 'success');
        }
        
    } catch (error) {
        console.error('‚ùå Share referral error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏', 'error');
    }
}

// –í—ã–≤–æ–¥ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
async function withdrawEarnings() {
    const balance = parseInt(document.getElementById('current-balance').textContent);
    
    if (balance < 100) {
        showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞: 100 ‚≠ê', 'warning');
        return;
    }
    
    try {
        const response = await fetch(`${API_BASE}/referral/withdraw/${appState.user.telegram_id}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                amount: balance,
                method: 'stars_to_money'
            })
        });
        
        if (!response.ok) {
            throw new Error('Withdrawal failed');
        }
        
        showNotification('–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');
        loadProfile(); // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        
    } catch (error) {
        console.error('‚ùå Withdrawal error:', error);
        showNotification('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤', 'error');
    }
}

// –£—Ç–∏–ª–∏—Ç—ã
function showLoader(text = '–ó–∞–≥—Ä—É–∑–∫–∞...') {
    const loader = document.getElementById('loader');
    loader.querySelector('p').textContent = text;
    loader.classList.add('active');
}

function hideLoader() {
    document.getElementById('loader').classList.remove('active');
}

function showNotification(text, type = 'success') {
    const notification = document.getElementById('notification');
    notification.textContent = text;
    notification.className = `notification ${type}`;
    notification.classList.add('show');
    
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
}

function copyToClipboard(text) {
    if (navigator.clipboard) {
        navigator.clipboard.writeText(text);
    } else {
        // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
        const textArea = document.createElement('textarea');
        textArea.value = text;
        document.body.appendChild(textArea);
        textArea.select();
        document.execCommand('copy');
        document.body.removeChild(textArea);
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ haptic feedback
function hapticFeedback(type = 'impact') {
    if (tg.HapticFeedback) {
        if (type === 'impact') {
            tg.HapticFeedback.impactOccurred('medium');
        } else if (type === 'notification') {
            tg.HapticFeedback.notificationOccurred('success');
        }
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º haptic feedback –∫ –∫–Ω–æ–ø–∫–∞–º
document.addEventListener('click', (e) => {
    if (e.target.tagName === 'BUTTON' || e.target.closest('button')) {
        hapticFeedback('impact');
    }
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
window.buyProduct = buyProduct;
window.buyProductCrypto = buyProductCrypto;