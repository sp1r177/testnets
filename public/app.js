// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let tg = window.Telegram?.WebApp;
let questions = [];
let userAnswers = [];
let currentQuestionIndex = 0;
let isSubmitting = false;

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const AppState = {
    MAIN: 'main',
    QUESTIONS: 'questions', 
    LOADING: 'loading',
    RESULT: 'result',
    ERROR: 'error'
};

let currentState = AppState.MAIN;

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const screens = {
    main: document.getElementById('main-screen'),
    questions: document.getElementById('questions-screen'),
    loading: document.getElementById('loading-screen'),
    result: document.getElementById('result-screen'),
    error: document.getElementById('error-screen')
};

const elements = {
    startBtn: document.getElementById('start-btn'),
    progress: document.getElementById('progress'),
    questionCounter: document.getElementById('question-counter'),
    questionText: document.getElementById('question-text'),
    answersContainer: document.getElementById('answers-container'),
    prevBtn: document.getElementById('prev-btn'),
    nextBtn: document.getElementById('next-btn'),
    resultContent: document.getElementById('result-content'),
    restartBtn: document.getElementById('restart-btn'),
    shareBtn: document.getElementById('share-btn'),
    errorMessage: document.getElementById('error-message'),
    retryBtn: document.getElementById('retry-btn'),
    fabBtn: document.getElementById('fab-btn')
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
document.addEventListener('DOMContentLoaded', () => {
    initializeApp();
    setupEventListeners();
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
function initializeApp() {
    console.log('üöÄ Initializing Telegram WebApp...');
    
    if (tg) {
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebApp
        tg.ready();
        tg.expand();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
        tg.MainButton.hide();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        tg.BackButton.hide();
        
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        tg.enableClosingConfirmation();
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É
        applyTelegramTheme();
        
        console.log('‚úÖ Telegram WebApp initialized');
        console.log('üì± Platform:', tg.platform);
        console.log('üé® Color scheme:', tg.colorScheme);
    } else {
        console.warn('‚ö†Ô∏è Telegram WebApp not available');
    }
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    showScreen(AppState.MAIN);
}

// –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
function applyTelegramTheme() {
    if (!tg) return;
    
    const root = document.documentElement;
    const themeParams = tg.themeParams;
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–º—ã
    for (const [key, value] of Object.entries(themeParams)) {
        root.style.setProperty(`--tg-theme-${key.replace(/_/g, '-')}`, value);
    }
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
function setupEventListeners() {
    // –ì–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω
    elements.startBtn.addEventListener('click', startQuiz);
    
    // –≠–∫—Ä–∞–Ω –≤–æ–ø—Ä–æ—Å–æ–≤
    elements.prevBtn.addEventListener('click', previousQuestion);
    elements.nextBtn.addEventListener('click', nextQuestion);
    
    // –≠–∫—Ä–∞–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    elements.restartBtn.addEventListener('click', restartQuiz);
    elements.shareBtn.addEventListener('click', shareResult);
    
    // –≠–∫—Ä–∞–Ω –æ—à–∏–±–∫–∏
    elements.retryBtn.addEventListener('click', retryLastAction);
    
    // FAB
    if (elements.fabBtn) {
        elements.fabBtn.addEventListener('click', () => {
            if (tg) {
                tg.showPopup({
                    title: '–ü–æ–º–æ—â—å',
                    message: '–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å? –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.',
                    buttons: [
                        { type: 'ok', text: '–ü–æ–Ω—è—Ç–Ω–æ' }
                    ]
                });
            }
        });
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ Telegram
    if (tg) {
        tg.BackButton.onClick(() => {
            handleBackButton();
        });
    }
}

// –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞–º–∏
function showScreen(screenName) {
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —ç–∫—Ä–∞–Ω—ã
    Object.values(screens).forEach(screen => {
        screen.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π —ç–∫—Ä–∞–Ω
    if (screens[screenName]) {
        screens[screenName].classList.add('active');
        currentState = screenName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Telegram WebApp
        updateTelegramUI();
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI Telegram WebApp
function updateTelegramUI() {
    if (!tg) return;
    
    switch (currentState) {
        case AppState.MAIN:
            tg.BackButton.hide();
            tg.MainButton.hide();
            break;
            
        case AppState.QUESTIONS:
            tg.BackButton.show();
            if (currentQuestionIndex < questions.length - 1) {
                updateMainButton('–î–∞–ª–µ–µ', nextQuestion);
            } else {
                updateMainButton('–ó–∞–≤–µ—Ä—à–∏—Ç—å', finishQuiz);
            }
            break;
            
        case AppState.LOADING:
            tg.BackButton.hide();
            tg.MainButton.hide();
            break;
            
        case AppState.RESULT:
            tg.BackButton.hide();
            updateMainButton('–ü–æ–¥–µ–ª–∏—Ç—å—Å—è', shareResult);
            break;
            
        case AppState.ERROR:
            tg.BackButton.show();
            updateMainButton('–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞', retryLastAction);
            break;
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ Telegram
function updateMainButton(text, onClick) {
    if (!tg) return;
    
    tg.MainButton.setText(text);
    tg.MainButton.show();
    tg.MainButton.onClick(onClick);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
function handleBackButton() {
    switch (currentState) {
        case AppState.QUESTIONS:
            if (currentQuestionIndex > 0) {
                previousQuestion();
            } else {
                showScreen(AppState.MAIN);
            }
            break;
            
        case AppState.ERROR:
            showScreen(AppState.MAIN);
            break;
            
        default:
            showScreen(AppState.MAIN);
            break;
    }
}

// API —Ñ—É–Ω–∫—Ü–∏–∏
async function fetchQuestions() {
    try {
        console.log('üì• Fetching questions...');
        const response = await fetch('/api/questions');
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Questions loaded:', data.length);
        return data;
    } catch (error) {
        console.error('‚ùå Error fetching questions:', error);
        throw error;
    }
}

async function submitAnswers(answers) {
    try {
        console.log('üì§ Submitting answers...');
        const response = await fetch('/api/answers', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ answers })
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Answers submitted');
        return data;
    } catch (error) {
        console.error('‚ùå Error submitting answers:', error);
        throw error;
    }
}

async function generateResult() {
    try {
        console.log('üîÑ Generating result...');
        const response = await fetch('/api/result/generate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }
        });
        
        if (!response.ok) {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('‚úÖ Result generated');
        return data;
    } catch (error) {
        console.error('‚ùå Error generating result:', error);
        throw error;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–≤–∏–∑–∞
async function startQuiz() {
    try {
        showScreen(AppState.LOADING);
        
        questions = await fetchQuestions();
        userAnswers = new Array(questions.length).fill(null);
        currentQuestionIndex = 0;
        
        showScreen(AppState.QUESTIONS);
        displayQuestion();
    } catch (error) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
    }
}

function displayQuestion() {
    if (!questions[currentQuestionIndex]) return;
    
    const question = questions[currentQuestionIndex];
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    const progress = ((currentQuestionIndex + 1) / questions.length) * 100;
    elements.progress.style.width = `${progress}%`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫
    elements.questionCounter.textContent = `${currentQuestionIndex + 1} –∏–∑ ${questions.length}`;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞
    elements.questionText.textContent = question.text || question.question;
    
    // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    displayAnswers(question.answers || question.options);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    updateNavigationButtons();
}

function displayAnswers(answers) {
    elements.answersContainer.innerHTML = '';
    
    answers.forEach((answer, index) => {
        const answerElement = document.createElement('div');
        answerElement.className = 'answer-option';
        answerElement.textContent = answer.text || answer;
        answerElement.dataset.index = index;
        answerElement.dataset.value = answer.value || answer;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–±—Ä–∞–Ω –ª–∏ —ç—Ç–æ—Ç –æ—Ç–≤–µ—Ç
        if (userAnswers[currentQuestionIndex] === (answer.value || answer)) {
            answerElement.classList.add('selected');
        }
        
        answerElement.addEventListener('click', () => selectAnswer(answer.value || answer, answerElement));
        
        elements.answersContainer.appendChild(answerElement);
    });
}

function selectAnswer(value, element) {
    // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    elements.answersContainer.querySelectorAll('.answer-option').forEach(option => {
        option.classList.remove('selected');
    });
    
    // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    element.classList.add('selected');
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    userAnswers[currentQuestionIndex] = value;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    updateNavigationButtons();
    
    // –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    if (tg) {
        tg.HapticFeedback.selectionChanged();
    }
}

function updateNavigationButtons() {
    const hasAnswer = userAnswers[currentQuestionIndex] !== null;
    const isFirstQuestion = currentQuestionIndex === 0;
    const isLastQuestion = currentQuestionIndex === questions.length - 1;
    
    elements.prevBtn.disabled = isFirstQuestion;
    elements.nextBtn.disabled = !hasAnswer;
    elements.nextBtn.textContent = isLastQuestion ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–î–∞–ª–µ–µ ‚Üí';
}

function previousQuestion() {
    if (currentQuestionIndex > 0) {
        currentQuestionIndex--;
        displayQuestion();
        
        if (tg) {
            tg.HapticFeedback.impactOccurred('light');
        }
    }
}

function nextQuestion() {
    if (currentQuestionIndex < questions.length - 1 && userAnswers[currentQuestionIndex] !== null) {
        currentQuestionIndex++;
        displayQuestion();
        
        if (tg) {
            tg.HapticFeedback.impactOccurred('light');
        }
    } else if (currentQuestionIndex === questions.length - 1) {
        finishQuiz();
    }
}

async function finishQuiz() {
    if (isSubmitting) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
    const unansweredQuestions = userAnswers.filter(answer => answer === null).length;
    if (unansweredQuestions > 0) {
        if (tg) {
            tg.showAlert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Å—Ç–∞–ª–æ—Å—å: ${unansweredQuestions}`);
        } else {
            alert(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã. –û—Å—Ç–∞–ª–æ—Å—å: ${unansweredQuestions}`);
        }
        return;
    }
    
    try {
        isSubmitting = true;
        showScreen(AppState.LOADING);
        
        if (tg) {
            tg.HapticFeedback.impactOccurred('medium');
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã
        await submitAnswers(userAnswers);
        
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const result = await generateResult();
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        displayResult(result);
        showScreen(AppState.RESULT);
        
    } catch (error) {
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    } finally {
        isSubmitting = false;
    }
}

function displayResult(result) {
    let content = '';
    
    if (typeof result === 'string') {
        content = result;
    } else if (result.text) {
        content = result.text;
    } else if (result.result) {
        content = result.result;
    } else {
        content = '–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≥–æ—Ç–æ–≤! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞.';
    }
    
    elements.resultContent.innerHTML = content;
}

function shareResult() {
    if (tg) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
        const resultData = {
            action: 'quiz_completed',
            timestamp: new Date().toISOString(),
            questionsCount: questions.length
        };
        
        tg.sendData(JSON.stringify(resultData));
        tg.close();
    } else {
        // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
        if (navigator.share) {
            navigator.share({
                title: '–ú–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞',
                text: '–Ø –ø—Ä–æ—à—ë–ª —Ç–µ—Å—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏ –≤—ã.',
                url: window.location.href
            });
        } else {
            // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            navigator.clipboard.writeText(window.location.href).then(() => {
                alert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            });
        }
    }
}

function restartQuiz() {
    if (tg) {
        tg.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?', (confirmed) => {
            if (confirmed) {
                resetQuiz();
                startQuiz();
            }
        });
    } else {
        if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ?')) {
            resetQuiz();
            startQuiz();
        }
    }
}

function resetQuiz() {
    questions = [];
    userAnswers = [];
    currentQuestionIndex = 0;
    isSubmitting = false;
}

function showError(message) {
    elements.errorMessage.textContent = message;
    showScreen(AppState.ERROR);
    
    if (tg) {
        tg.HapticFeedback.notificationOccurred('error');
    }
}

function retryLastAction() {
    switch (currentState) {
        case AppState.ERROR:
            startQuiz();
            break;
        default:
            showScreen(AppState.MAIN);
            break;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
window.addEventListener('error', (event) => {
    console.error('üí• Global error:', event.error);
    showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.');
});

window.addEventListener('unhandledrejection', (event) => {
    console.error('üí• Unhandled promise rejection:', event.reason);
    showError('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
});

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        AppState,
        fetchQuestions,
        submitAnswers,
        generateResult,
        showScreen
    };
}

// –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
console.log('üì± App.js loaded successfully');
console.log('üîß Available functions:', Object.keys(window).filter(key => typeof window[key] === 'function'));