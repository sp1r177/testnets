import express from 'express';
import OpenAI from 'openai';
import { authenticateToken } from './auth';
import { prisma } from '../index';
import { checkUsageLimit } from '../utils/usage';

const router = express.Router();

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// Available tones for chat generation
const TONES = {
  flirt: {
    name: '–§–ª–∏—Ä—Ç',
    description: '–ò–≥—Ä–∏–≤—ã–π –∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–π —Ç–æ–Ω',
    systemPrompt: '–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ñ–ª–∏—Ä—Ç—É—é—â–∏–π –¥–∏–∞–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –∏–≥—Ä–∏–≤–æ, —Å –ª—ë–≥–∫–∏–º –∫–æ–∫–µ—Ç—Å—Ç–≤–æ–º, –∏—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ –Ω–∞–º—ë–∫–∏. –ë—É–¥—å –æ—á–∞—Ä–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º –∏ –∏–Ω—Ç—Ä–∏–≥—É—é—â–∏–º.'
  },
  friendly: {
    name: '–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π',
    description: '–¢—ë–ø–ª—ã–π –∏ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–æ–Ω',
    systemPrompt: '–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥—Ä—É–∂–µ—Å–∫—É—é –±–µ—Å–µ–¥—É. –û—Ç–≤–µ—á–∞–π —Ç–µ–ø–ª–æ, –∏—Å–∫—Ä–µ–Ω–Ω–µ, —Å –∏–Ω—Ç–µ—Ä–µ—Å–æ–º –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É. –ò—Å–ø–æ–ª—å–∑—É–π –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ —ç–º–æ–¥–∑–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã.'
  },
  serious: {
    name: '–°–µ—Ä—å—ë–∑–Ω—ã–π',
    description: '–î–µ–ª–æ–≤–æ–π –∏ –≤–¥—É–º—á–∏–≤—ã–π —Ç–æ–Ω',
    systemPrompt: '–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å–µ—Ä—å—ë–∑–Ω—É—é –±–µ—Å–µ–¥—É. –û—Ç–≤–µ—á–∞–π –≤–¥—É–º—á–∏–≤–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ. –ò–∑–±–µ–≥–∞–π –ª–∏—à–Ω–∏—Ö —ç–º–æ–¥–∑–∏, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–∏.'
  }
};

// Get available tones
router.get('/tones', (req, res) => {
  const tones = Object.entries(TONES).map(([key, value]) => ({
    id: key,
    name: value.name,
    description: value.description
  }));
  
  res.json({ tones });
});

// Generate chat responses
router.post('/generate', authenticateToken, async (req: any, res) => {
  try {
    const { chatMessages, tone } = req.body;
    const user = req.user;

    // Validate input
    if (!chatMessages || !Array.isArray(chatMessages) || chatMessages.length === 0) {
      return res.status(400).json({ error: 'chatMessages array is required' });
    }

    if (!tone || !TONES[tone as keyof typeof TONES]) {
      return res.status(400).json({ error: 'Valid tone is required' });
    }

    // Check usage limits
    const canGenerate = await checkUsageLimit(user);
    if (!canGenerate) {
      return res.status(429).json({ 
        error: 'Usage limit exceeded',
        message: user.subscriptionActive 
          ? 'Monthly limit reached. Please upgrade your plan or wait for next month.'
          : 'Daily limit reached. Please subscribe to Pro for more generations.'
      });
    }

    // Prepare messages for OpenAI
    const lastMessage = chatMessages[chatMessages.length - 1];
    const contextMessages = chatMessages.slice(-5); // Last 5 messages for context

    const systemPrompt = TONES[tone as keyof typeof TONES].systemPrompt;
    
    const conversation = contextMessages.map((msg: any) => ({
      role: msg.sender === 'me' ? 'assistant' : 'user',
      content: msg.text
    }));

    const prompt = `
${systemPrompt}

–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–µ—Ä–µ–ø–∏—Å–∫–∏:
${contextMessages.map((msg: any) => `${msg.sender === 'me' ? '–Ø' : '–°–æ–±–µ—Å–µ–¥–Ω–∏–∫'}: ${msg.text}`).join('\n')}

–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞: "${lastMessage.text}"

–°–æ–∑–¥–∞–π 3 —Ä–∞–∑–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–æ–Ω–µ. –ö–∞–∂–¥—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ç–æ–Ω—É
- –ù–µ –¥–ª–∏–Ω–Ω–µ–µ 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π
- –£–Ω–∏–∫–∞–ª—å–Ω—ã–º –ø–æ –ø–æ–¥—Ö–æ–¥—É

–í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{
  "responses": [
    {"text": "–ü–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"},
    {"text": "–í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"},
    {"text": "–¢—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞"}
  ]
}
`;

    // Generate responses with OpenAI
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        { role: 'system', content: systemPrompt },
        { role: 'user', content: prompt }
      ],
      max_tokens: 500,
      temperature: 0.8,
    });

    const responseText = completion.choices[0]?.message?.content;
    if (!responseText) {
      throw new Error('No response from OpenAI');
    }

    // Parse JSON response
    let responses;
    try {
      const parsed = JSON.parse(responseText);
      responses = parsed.responses || [];
    } catch (parseError) {
      // Fallback: try to extract responses manually
      console.warn('Failed to parse JSON, using fallback');
      responses = [
        { text: responseText.slice(0, 200) + '...' },
        { text: responseText.slice(0, 200) + '...' },
        { text: responseText.slice(0, 200) + '...' }
      ];
    }

    // Ensure we have exactly 3 responses
    while (responses.length < 3) {
      responses.push({ text: '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ üòä' });
    }
    responses = responses.slice(0, 3);

    // Save generation to database
    const generation = await prisma.generation.create({
      data: {
        userId: user.id,
        chatMessages: JSON.stringify(chatMessages),
        tone,
        responses: JSON.stringify(responses),
        tokensUsed: completion.usage?.total_tokens || 0,
        model: 'gpt-3.5-turbo',
      }
    });

    // Update user usage
    await updateUserUsage(user);

    res.json({
      success: true,
      generation: {
        id: generation.id,
        responses,
        tone,
        tokensUsed: generation.tokensUsed,
      }
    });

  } catch (error) {
    console.error('Chat generation error:', error);
    res.status(500).json({ 
      error: 'Failed to generate responses',
      message: error instanceof Error ? error.message : 'Unknown error'
    });
  }
});

// Get user's generation history
router.get('/history', authenticateToken, async (req: any, res) => {
  try {
    const user = req.user;
    const page = parseInt(req.query.page as string) || 1;
    const limit = parseInt(req.query.limit as string) || 10;
    const skip = (page - 1) * limit;

    const generations = await prisma.generation.findMany({
      where: { userId: user.id },
      orderBy: { createdAt: 'desc' },
      skip,
      take: limit,
      select: {
        id: true,
        tone: true,
        responses: true,
        selectedResponse: true,
        tokensUsed: true,
        createdAt: true,
      }
    });

    const total = await prisma.generation.count({
      where: { userId: user.id }
    });

    res.json({
      generations: generations.map(gen => ({
        ...gen,
        responses: JSON.parse(gen.responses as string)
      })),
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    });

  } catch (error) {
    console.error('History fetch error:', error);
    res.status(500).json({ error: 'Failed to fetch history' });
  }
});

// Mark response as selected
router.post('/select/:generationId', authenticateToken, async (req: any, res) => {
  try {
    const { generationId } = req.params;
    const { selectedResponse } = req.body;
    const user = req.user;

    if (!selectedResponse) {
      return res.status(400).json({ error: 'selectedResponse is required' });
    }

    const generation = await prisma.generation.findFirst({
      where: {
        id: generationId,
        userId: user.id
      }
    });

    if (!generation) {
      return res.status(404).json({ error: 'Generation not found' });
    }

    await prisma.generation.update({
      where: { id: generationId },
      data: { selectedResponse }
    });

    res.json({ success: true });

  } catch (error) {
    console.error('Select response error:', error);
    res.status(500).json({ error: 'Failed to select response' });
  }
});

// Update user usage counters
async function updateUserUsage(user: any) {
  const now = new Date();
  const resetDate = new Date(user.lastResetDate);
  
  // Check if we need to reset daily counter (new day)
  const isNewDay = now.getDate() !== resetDate.getDate() || 
                   now.getMonth() !== resetDate.getMonth() ||
                   now.getFullYear() !== resetDate.getFullYear();

  // Check if we need to reset monthly counter (new month)
  const isNewMonth = now.getMonth() !== resetDate.getMonth() ||
                     now.getFullYear() !== resetDate.getFullYear();

  await prisma.user.update({
    where: { id: user.id },
    data: {
      dailyGenerations: isNewDay ? 1 : user.dailyGenerations + 1,
      monthlyGenerations: isNewMonth ? 1 : user.monthlyGenerations + 1,
      lastResetDate: isNewDay ? now : user.lastResetDate,
    }
  });
}

export default router;