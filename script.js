// App State Management
class FitnessApp {
    constructor() {
        this.state = {
            currentDay: 1,
            completedDays: [],
            selectedGoal: null,
            xp: 0,
            streak: 0,
            achievements: [],
            isPremium: false,
            userName: '–ë–æ–µ—Ü'
        };
        
        this.goals = {
            slim: {
                name: '–£–±—Ä–∞—Ç—å –∂–∏–≤–æ—Ç',
                icon: 'üî•',
                exercises: this.getSlimExercises()
            },
            tone: {
                name: '–ü–æ–¥—Ç—è–Ω—É—Ç—å —Ç–µ–ª–æ',
                icon: '‚ú®',
                exercises: this.getToneExercises()
            },
            mass: {
                name: '–ù–∞–±—Ä–∞—Ç—å –º–∞—Å—Å—É',
                icon: 'üí™',
                exercises: this.getMassExercises()
            }
        };
        
        this.achievementsList = [
            { id: 'first_day', name: '–ü–µ—Ä–≤—ã–π —à–∞–≥', icon: 'üéØ', condition: '–ó–∞–≤–µ—Ä—à–∏—Ç—å 1 –¥–µ–Ω—å', unlocked: false },
            { id: 'streak_3', name: '3 –¥–Ω—è –ø–æ–¥—Ä—è–¥', icon: 'üî•', condition: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥', unlocked: false },
            { id: 'streak_7', name: '–ù–µ–¥–µ–ª—è —Å–∏–ª—ã', icon: 'üí™', condition: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è 7 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', unlocked: false },
            { id: 'streak_14', name: '2 –Ω–µ–¥–µ–ª–∏', icon: '‚ö°', condition: '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è 14 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥', unlocked: false },
            { id: 'streak_30', name: '–ß–µ–º–ø–∏–æ–Ω', icon: 'üëë', condition: '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–µ—Å—å –∫—É—Ä—Å', unlocked: false },
            { id: 'xp_500', name: '–û–ø—ã—Ç–Ω—ã–π', icon: 'üåü', condition: '–ù–∞–±—Ä–∞—Ç—å 500 XP', unlocked: false },
            { id: 'xp_1000', name: '–ú–∞—Å—Ç–µ—Ä', icon: 'üèÜ', condition: '–ù–∞–±—Ä–∞—Ç—å 1000 XP', unlocked: false }
        ];
        
        this.motivationQuotes = [
            "–ü–æ–º–Ω–∏: –∫–∞–∂–¥–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç —Ç–µ–±—è –∫ —Ü–µ–ª–∏!",
            "–¢—ã —Å–∏–ª—å–Ω–µ–µ, —á–µ–º –¥—É–º–∞–µ—à—å!",
            "–ë–æ–ª—å –≤—Ä–µ–º–µ–Ω–Ω–∞, –≥–æ—Ä–¥–æ—Å—Ç—å –≤–µ—á–Ω–∞!",
            "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –∫–æ–≥–¥–∞ –±–æ–ª—å–Ω–æ. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—à—å!",
            "–¢–≤–æ–µ —Ç–µ–ª–æ –º–æ–∂–µ—Ç. –¢–≤–æ–π —Ä–∞–∑—É–º –≥–æ–≤–æ—Ä–∏—Ç '–º–æ–≥—É'. –¢–≤–æ—è –¥—É—à–∞ –≥–æ–≤–æ—Ä–∏—Ç '–¥–æ–ª–∂–µ–Ω'!",
            "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî –Ω–æ–≤–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å—Ç–∞—Ç—å –ª—É—á—à–µ!",
            "–¢—ã —É–∂–µ –≤–ø–µ—Ä–µ–¥–∏ –≤—Å–µ—Ö, –∫—Ç–æ –¥–∞–∂–µ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª!",
            "–ü—Ä–æ–≥—Ä–µ—Å—Å –≤–∞–∂–Ω–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞!",
            "–°–µ–≥–æ–¥–Ω—è —Ç—ã –Ω–∞ —à–∞–≥ –±–ª–∏–∂–µ –∫ —Å–≤–æ–µ–π —Ü–µ–ª–∏!",
            "–¢–≤–æ—è —Å–∏–ª–∞ —Ä–∞—Å—Ç–µ—Ç —Å –∫–∞–∂–¥–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–æ–π!"
        ];
        
        this.init();
    }
    
    init() {
        this.loadState();
        this.initTelegramWebApp();
        this.generateCalendar();
        this.updateUI();
        this.checkAchievements();
    }
    
    initTelegramWebApp() {
        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
            const tg = Telegram.WebApp;
            tg.ready();
            tg.expand();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
            if (tg.initDataUnsafe.user) {
                this.state.userName = tg.initDataUnsafe.user.first_name || '–ë–æ–µ—Ü';
                document.getElementById('user-name').textContent = this.state.userName;
            }
            
            // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞ –ø–æ–¥ —Ç–µ–º—É Telegram
            if (tg.colorScheme === 'dark') {
                document.body.classList.add('dark-theme');
            }
        }
    }
    
    loadState() {
        const saved = localStorage.getItem('fitnessAppState');
        if (saved) {
            this.state = { ...this.state, ...JSON.parse(saved) };
        }
    }
    
    saveState() {
        localStorage.setItem('fitnessAppState', JSON.stringify(this.state));
    }
    
    updateUI() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        document.getElementById('current-day').textContent = this.state.currentDay;
        document.getElementById('xp-points').textContent = this.state.xp;
        document.getElementById('total-xp').textContent = this.state.xp;
        document.getElementById('streak-days').textContent = this.state.streak;
        document.getElementById('achievements-count').textContent = this.state.achievements.length;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        const progressPercent = (this.state.completedDays.length / 30) * 100;
        document.getElementById('progress-fill').style.width = progressPercent + '%';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        this.updateCalendar();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.updateAchievements();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–¥–∞–Ω–∏—è –¥–Ω—è
        this.updateDailyTaskButton();
    }
    
    generateCalendar() {
        const calendar = document.getElementById('calendar-grid');
        calendar.innerHTML = '';
        
        for (let day = 1; day <= 30; day++) {
            const dayCell = document.createElement('div');
            dayCell.className = 'day-cell';
            dayCell.textContent = day;
            dayCell.setAttribute('data-day', day);
            
            if (this.state.completedDays.includes(day)) {
                dayCell.classList.add('completed');
            } else if (day === this.state.currentDay) {
                dayCell.classList.add('current');
            } else if (day > this.state.currentDay) {
                dayCell.classList.add('locked');
            }
            
            calendar.appendChild(dayCell);
        }
    }
    
    updateCalendar() {
        const cells = document.querySelectorAll('.day-cell');
        cells.forEach(cell => {
            const day = parseInt(cell.getAttribute('data-day'));
            cell.className = 'day-cell';
            
            if (this.state.completedDays.includes(day)) {
                cell.classList.add('completed');
            } else if (day === this.state.currentDay) {
                cell.classList.add('current');
            } else if (day > this.state.currentDay) {
                cell.classList.add('locked');
            }
        });
    }
    
    updateDailyTaskButton() {
        const btn = document.getElementById('daily-task-btn');
        if (this.state.completedDays.includes(this.state.currentDay)) {
            btn.textContent = '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!';
            btn.disabled = true;
            btn.classList.add('completed');
        } else {
            btn.textContent = '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –¥–Ω—è';
            btn.disabled = false;
            btn.classList.remove('completed');
        }
    }
    
    selectGoal(goalType) {
        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –¥—Ä—É–≥–∏—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
        document.querySelectorAll('.goal-card').forEach(card => {
            card.classList.remove('selected');
        });
        
        // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É
        event.target.closest('.goal-card').classList.add('selected');
        
        this.state.selectedGoal = goalType;
        this.saveState();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
            this.showProgressScreen();
        }, 300);
    }
    
    getDailyTask() {
        if (!this.state.selectedGoal) return null;
        
        const goalExercises = this.goals[this.state.selectedGoal].exercises;
        const dayIndex = (this.state.currentDay - 1) % goalExercises.length;
        return goalExercises[dayIndex];
    }
    
    showDailyTask() {
        const task = this.getDailyTask();
        if (!task) return;
        
        document.getElementById('task-title').textContent = `–î–µ–Ω—å ${this.state.currentDay} ‚Äî –ó–∞–¥–∞–Ω–∏–µ`;
        
        const taskDescription = document.getElementById('task-description');
        taskDescription.innerHTML = `
            <h3>${task.title}</h3>
            <ul>
                ${task.exercises.map(exercise => `<li>${exercise}</li>`).join('')}
            </ul>
        `;
        
        // –°–ª—É—á–∞–π–Ω–∞—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞
        const randomQuote = this.motivationQuotes[Math.floor(Math.random() * this.motivationQuotes.length)];
        document.getElementById('ai-motivation').innerHTML = `
            <div class="ai-avatar">ü§ñ</div>
            <p>"${randomQuote}"</p>
        `;
    }
    
    completeTask() {
        if (this.state.completedDays.includes(this.state.currentDay)) return;
        
        // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å –≤ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        this.state.completedDays.push(this.state.currentDay);
        
        // –ù–∞—á–∏—Å–ª—è–µ–º XP
        const xpEarned = 50 + (this.state.currentDay * 5); // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ
        this.state.xp += xpEarned;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç—Ä–∏–∫
        this.updateStreak();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        this.checkAchievements();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –Ω–∞–≥—Ä–∞–¥—ã
        this.showReward(xpEarned);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é
        if (this.state.currentDay < 30) {
            this.state.currentDay++;
        }
        
        this.saveState();
    }
    
    updateStreak() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–Ω–∏–µ –≤—á–µ—Ä–∞
        const yesterday = this.state.currentDay - 1;
        if (yesterday > 0 && this.state.completedDays.includes(yesterday)) {
            this.state.streak++;
        } else if (this.state.currentDay === 1) {
            this.state.streak = 1;
        } else {
            this.state.streak = 1; // –°–±—Ä–æ—Å —Å—Ç—Ä–∏–∫–∞
        }
    }
    
    checkAchievements() {
        this.achievementsList.forEach(achievement => {
            if (achievement.unlocked) return;
            
            let shouldUnlock = false;
            
            switch (achievement.id) {
                case 'first_day':
                    shouldUnlock = this.state.completedDays.length >= 1;
                    break;
                case 'streak_3':
                    shouldUnlock = this.state.streak >= 3;
                    break;
                case 'streak_7':
                    shouldUnlock = this.state.streak >= 7;
                    break;
                case 'streak_14':
                    shouldUnlock = this.state.streak >= 14;
                    break;
                case 'streak_30':
                    shouldUnlock = this.state.completedDays.length >= 30;
                    break;
                case 'xp_500':
                    shouldUnlock = this.state.xp >= 500;
                    break;
                case 'xp_1000':
                    shouldUnlock = this.state.xp >= 1000;
                    break;
            }
            
            if (shouldUnlock) {
                achievement.unlocked = true;
                this.state.achievements.push(achievement.id);
                this.showAchievementNotification(achievement);
            }
        });
    }
    
    showAchievementNotification(achievement) {
        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
        console.log(`–î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: ${achievement.name}`);
    }
    
    updateAchievements() {
        const grid = document.querySelector('.achievements-grid');
        grid.innerHTML = '';
        
        this.achievementsList.forEach(achievement => {
            const achievementEl = document.createElement('div');
            achievementEl.className = 'achievement';
            if (achievement.unlocked) {
                achievementEl.classList.add('unlocked');
            }
            
            achievementEl.innerHTML = `
                <div class="achievement-icon">${achievement.icon}</div>
                <div class="achievement-name">${achievement.name}</div>
            `;
            
            grid.appendChild(achievementEl);
        });
    }
    
    showReward(xpEarned) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –Ω–∞–≥—Ä–∞–¥—ã
        const rewards = ['üèÜ', 'ü•á', 'üéñÔ∏è', '‚≠ê', 'üíé', 'üî•'];
        const randomReward = rewards[Math.floor(Math.random() * rewards.length)];
        
        document.getElementById('reward-medal').textContent = randomReward;
        document.getElementById('xp-earned').textContent = xpEarned;
        
        // –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        let message = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!";
        const progress = this.state.completedDays.length / 30;
        
        if (progress >= 0.9) {
            message = "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! –¢—ã –ø–æ—á—Ç–∏ —É —Ü–µ–ª–∏!";
        } else if (progress >= 0.5) {
            message = "–û—Ç–ª–∏—á–Ω–æ! –¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª –ø–æ–ª–æ–≤–∏–Ω—É –ø—É—Ç–∏!";
        } else if (progress >= 0.25) {
            message = "–¢—ã —É–∂–µ –≤–ø–µ—Ä–µ–¥–∏ 70% —Ç–µ—Ö, –∫—Ç–æ –Ω–∞—á–∏–Ω–∞–ª ‚Äî –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Å—è!";
        }
        
        document.getElementById('reward-description').textContent = message;
        
        this.showScreen('reward-screen');
    }
    
    shareProgress() {
        const message = `üî• –ü—Ä–æ–∫–∞—á–∏–≤–∞—é —Ç–µ–ª–æ —É–∂–µ ${this.state.completedDays.length} –¥–Ω–µ–π!\nüí™ –ù–∞–±—Ä–∞–ª ${this.state.xp} XP\nüéØ –¶–µ–ª—å: ${this.goals[this.state.selectedGoal]?.name}\n\n–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ —á–µ–ª–ª–µ–Ω–¥–∂—É!`;
        
        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
            Telegram.WebApp.openTelegramLink(`https://t.me/share/url?url=https://your-app-url.com&text=${encodeURIComponent(message)}`);
        } else {
            // Fallback –¥–ª—è –≤–µ–±-–≤–µ—Ä—Å–∏–∏
            navigator.share({
                title: '–ü—Ä–æ–∫–∞—á–∞–π —Ç–µ–ª–æ –∑–∞ 30 –¥–Ω–µ–π',
                text: message,
                url: window.location.href
            }).catch(err => {
                // –ö–æ–ø–∏—Ä—É–µ–º –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
                navigator.clipboard.writeText(message);
                alert('–°–æ–æ–±—â–µ–Ω–∏–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
            });
        }
    }
    
    purchaseSubscription() {
        if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫—É–ø–∫–µ –±–æ—Ç—É
            Telegram.WebApp.sendData(JSON.stringify({
                action: 'purchase_subscription',
                amount: 299,
                currency: 'RUB'
            }));
        } else {
            alert('–§—É–Ω–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Telegram WebApp');
        }
    }
    
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —ç–∫—Ä–∞–Ω–∞–º–∏
    showScreen(screenId) {
        document.querySelectorAll('.screen').forEach(screen => {
            screen.classList.remove('active');
        });
        document.getElementById(screenId).classList.add('active');
    }
    
    showWelcomeScreen() {
        this.showScreen('welcome-screen');
    }
    
    showGoalScreen() {
        this.showScreen('goal-screen');
    }
    
    showProgressScreen() {
        this.updateUI();
        this.showScreen('progress-screen');
    }
    
    showDailyTaskScreen() {
        this.showDailyTask();
        this.showScreen('task-screen');
    }
    
    showProfileScreen() {
        this.updateUI();
        this.showScreen('profile-screen');
    }
    
    showSubscriptionScreen() {
        this.showScreen('subscription-screen');
    }
    
    // –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ü–µ–ª–µ–π
    getSlimExercises() {
        return [
            {
                title: "–ñ–∏—Ä–æ—Å–∂–∏–≥–∞—é—â–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                exercises: ["50 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ", "30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "20 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "60 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            },
            {
                title: "–ö–∞—Ä–¥–∏–æ + –ø—Ä–µ—Å—Å",
                exercises: ["40 –±–µ—Ä–ø–∏", "60 —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–π", "30 –≥–æ—Ä–Ω—ã—Ö –∞–ª—å–ø–∏–Ω–∏—Å—Ç–æ–≤", "20 –≤—ã–ø–∞–¥–æ–≤"]
            },
            {
                title: "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                exercises: ["60 —Å–µ–∫ –ø—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ", "30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "60 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞", "20 –æ—Ç–∂–∏–º–∞–Ω–∏–π"]
            },
            {
                title: "–ü—Ä–µ—Å—Å –∏ –∫–∞—Ä–¥–∏–æ",
                exercises: ["50 –≤–µ–ª–æ—Å–∏–ø–µ–¥–Ω—ã—Ö —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–π", "40 –ø—Ä—ã–∂–∫–æ–≤", "30 –ø–æ–¥—ä–µ–º–æ–≤ –Ω–æ–≥", "90 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            }
        ];
    }
    
    getToneExercises() {
        return [
            {
                title: "–û–±—â–∏–π —Ç–æ–Ω—É—Å —Ç–µ–ª–∞",
                exercises: ["30 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "15 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "60 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞", "20 –≤—ã–ø–∞–¥–æ–≤"]
            },
            {
                title: "–£–∫—Ä–µ–ø–ª–µ–Ω–∏–µ –º—ã—à—Ü",
                exercises: ["25 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "40 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "30 –ø–æ–¥—ä–µ–º–æ–≤ –Ω–æ–≥", "75 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            },
            {
                title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                exercises: ["20 –±–µ—Ä–ø–∏", "35 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "20 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "45 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            },
            {
                title: "–°–∏–ª–æ–≤–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å",
                exercises: ["40 —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–π", "30 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "50 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "90 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            }
        ];
    }
    
    getMassExercises() {
        return [
            {
                title: "–°–∏–ª–æ–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞",
                exercises: ["40 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "60 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "30 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π –Ω–∞ —Ç—É—Ä–Ω–∏–∫–µ", "120 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            },
            {
                title: "–ù–∞—Ä–∞—â–∏–≤–∞–Ω–∏–µ –º—ã—à—Ü",
                exercises: ["50 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "80 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "40 –≤—ã–ø–∞–¥–æ–≤", "25 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π"]
            },
            {
                title: "–í–∑—Ä—ã–≤–Ω–∞—è —Å–∏–ª–∞",
                exercises: ["30 –±–µ—Ä–ø–∏", "60 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π —Å –ø—Ä—ã–∂–∫–æ–º", "35 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "150 —Å–µ–∫ –ø–ª–∞–Ω–∫–∞"]
            },
            {
                title: "–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏–ª–∞",
                exercises: ["45 –æ—Ç–∂–∏–º–∞–Ω–∏–π", "100 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π", "50 –≤—ã–ø–∞–¥–æ–≤", "30 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π"]
            }
        ];
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML
let app;

function initApp() {
    app = new FitnessApp();
}

function showWelcomeScreen() {
    app.showWelcomeScreen();
}

function showGoalScreen() {
    app.showGoalScreen();
}

function showProgressScreen() {
    app.showProgressScreen();
}

function showDailyTaskScreen() {
    app.showDailyTaskScreen();
}

function showProfileScreen() {
    app.showProfileScreen();
}

function showSubscriptionScreen() {
    app.showSubscriptionScreen();
}

function selectGoal(goalType) {
    app.selectGoal(goalType);
}

function completeTask() {
    app.completeTask();
}

function shareProgress() {
    app.shareProgress();
}

function purchaseSubscription() {
    app.purchaseSubscription();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initApp);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è WebApp
if (typeof Telegram !== 'undefined' && Telegram.WebApp) {
    Telegram.WebApp.onEvent('mainButtonClicked', function() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    });
    
    Telegram.WebApp.onEvent('backButtonClicked', function() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        const activeScreen = document.querySelector('.screen.active');
        const screenId = activeScreen.id;
        
        switch (screenId) {
            case 'goal-screen':
                app.showWelcomeScreen();
                break;
            case 'progress-screen':
                app.showGoalScreen();
                break;
            case 'task-screen':
            case 'profile-screen':
                app.showProgressScreen();
                break;
            case 'subscription-screen':
                app.showProfileScreen();
                break;
            case 'reward-screen':
                app.showProgressScreen();
                break;
            default:
                Telegram.WebApp.close();
        }
    });
}